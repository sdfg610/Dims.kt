package syntactic_analysis;

import org.sdfg610.dims.abstract_syntax.*;
import java.util.ArrayList;

/* The required start of a Coco/R grammar file. "Program" specifies the starting symbol of the grammar. */


public class Parser {
	public static final int _EOF = 0;
	public static final int _IDENT = 1;
	public static final int _NUM = 2;
	public static final int maxT = 27;

	static final boolean _T = true;
	static final boolean _x = false;
	static final int minErrDist = 2;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;
	
	public Scanner scanner;
	public Errors errors;

	public Stmt mainNode = null; // This contains the AST generated by calling parser.Parse().

    public boolean hasErrors() {
        return errors.count > 0;
    }

    private Stmt toComp(ArrayList<Stmt> stmtsReversed)
    {
        if (stmtsReversed.isEmpty())
            return null;

        Stmt result = stmtsReversed.getFirst();
        int index = 1;
        while (index < stmtsReversed.size()){
            Stmt current = stmtsReversed.get(index);
            if (current instanceof Comp comp)
                result = new Comp (comp.getStmt1(), new Comp(comp.getStmt2(), result));
            else
                result = new Comp(current, result);
            index += 1;
        }
        return result;
    }

    private Expr applyUnaries(ArrayList<Character> unariesReversed, Expr base)
    {
        Expr result = base;
        int index = 0;
        while (index < unariesReversed.size()){
            char ch = unariesReversed.get(index);
            result = switch (ch) {
                case '!' -> new UnaryOp(UnaryOperators.NOT, result);
                case '-' -> new UnaryOp(UnaryOperators.NEG, result);
                default -> throw new RuntimeException("Unknown unary operator: " + ch);
            };
            index += 1;
        }
        return result;
    }

    private Expr makeEqOp(String op, Expr left, Expr right)
    {
        return switch (op) {
            case "=" ->  new BinaryOp(BinaryOperators.EQ, left, right);
            case "!=" -> new UnaryOp(UnaryOperators.NOT, new BinaryOp(BinaryOperators.EQ, left, right));
            default -> throw new RuntimeException("Unknown equality operator: " + op);
        };
    }


/*------------------------------------------------------------------------*/
/* The following section contains the token specification of Dims.*/


	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (String msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) {
				++errDist;
				break;
			}

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	boolean StartOf (int s) {
		return set[s][la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}
	
	boolean WeakSeparator (int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) { Get(); return true; }
		else if (StartOf(repFol)) return false;
		else {
			SynErr(n);
			while (!(set[syFol][kind] || set[repFol][kind] || set[0][kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}
	
	void Program() {
		mainNode = Stmts();
	}

	Stmt  Stmts() {
		Stmt  stmt;
		ArrayList<Stmt> list = new ArrayList(); 
		while (StartOf(1)) {
			Stmt temp = Stmt();
			list.add(temp); 
		}
		stmt = toComp(new ArrayList(list.reversed())); 
		return stmt;
	}

	Stmt  Stmt() {
		Stmt  stmt;
		stmt = Skip.INSTANCE; 
		if (la.kind == 15 || la.kind == 16) {
			stmt = Declaration();
		} else if (la.kind == 1) {
			stmt = Assignment();
		} else if (la.kind == 5) {
			stmt = Print();
		} else if (la.kind == 6) {
			stmt = If();
		} else if (la.kind == 12) {
			stmt = While();
		} else SynErr(28);
		return stmt;
	}

	Stmt  Declaration() {
		Stmt  stmt;
		Type type = Type();
		Expect(1);
		Var var = new Var(t.val); stmt = new Declaration(type, var); 
		if (la.kind == 3) {
			Get();
			Expr expr = Expr();
			stmt = new Comp(stmt, new Assign(var, expr));            
		}
		Expect(4);
		return stmt;
	}

	Stmt  Assignment() {
		Stmt  stmt;
		Expect(1);
		Var var = new Var(t.val); 
		Expect(3);
		Expr expr = Expr();
		stmt = new Assign(var, expr); 
		Expect(4);
		return stmt;
	}

	Stmt  Print() {
		Stmt  stmt;
		Expect(5);
		Expr expr = Expr();
		stmt = new Print(expr); 
		Expect(4);
		return stmt;
	}

	Stmt  If() {
		Stmt  stmt;
		Stmt stmtElse = Skip.INSTANCE; 
		Expect(6);
		Expect(7);
		Expr cond = Expr();
		Expect(8);
		Expect(9);
		Stmt stmtThen = Stmts();
		if (la.kind == 10) {
			Get();
			stmtElse = Stmts();
		}
		Expect(11);
		stmt = new If(cond, stmtThen, stmtElse); 
		return stmt;
	}

	Stmt  While() {
		Stmt  stmt;
		Expect(12);
		Expect(7);
		Expr cond = Expr();
		Expect(8);
		Expect(13);
		Stmt body = Stmts();
		Expect(14);
		stmt = new While(cond, body); 
		return stmt;
	}

	Type  Type() {
		Type  type;
		type = null; 
		if (la.kind == 15) {
			Get();
			type = IntT.INSTANCE; 
		} else if (la.kind == 16) {
			Get();
			type = BoolT.INSTANCE; 
		} else SynErr(29);
		return type;
	}

	Expr  Expr() {
		Expr  expr;
		expr = EqExpr();
		while (la.kind == 17) {
			Get();
			Expr expr2 = EqExpr();
			expr = new BinaryOp(BinaryOperators.OR, expr, expr2); 
		}
		return expr;
	}

	Expr  EqExpr() {
		Expr  expr;
		String op = null; 
		expr = RelExpr();
		while (la.kind == 18 || la.kind == 19) {
			if (la.kind == 18) {
				Get();
				op = "="; 
			} else {
				Get();
				op = "!="; 
			}
			Expr expr2 = RelExpr();
			expr = makeEqOp(op, expr, expr2); 
		}
		return expr;
	}

	Expr  RelExpr() {
		Expr  expr;
		expr = PlusExpr();
		while (la.kind == 20) {
			Get();
			Expr expr2 = PlusExpr();
			expr = new BinaryOp(BinaryOperators.LT, expr, expr2); 
		}
		return expr;
	}

	Expr  PlusExpr() {
		Expr  expr;
		BinaryOperators op = BinaryOperators.ADD; 
		expr = MultExpr();
		while (la.kind == 21 || la.kind == 22) {
			if (la.kind == 21) {
				Get();
				op = BinaryOperators.ADD; 
			} else {
				Get();
				op = BinaryOperators.SUB; 
			}
			Expr expr2 = MultExpr();
			expr = new BinaryOp(op, expr, expr2); 
		}
		return expr;
	}

	Expr  MultExpr() {
		Expr  expr;
		expr = NotExpr();
		while (la.kind == 23) {
			Get();
			Expr expr2 = NotExpr();
			expr = new BinaryOp(BinaryOperators.MUL, expr, expr2); 
		}
		return expr;
	}

	Expr  NotExpr() {
		Expr  expr;
		ArrayList<Character> unaries = new ArrayList(); 
		while (la.kind == 22 || la.kind == 24) {
			if (la.kind == 24) {
				Get();
				unaries.add('!'); 
			} else {
				Get();
				unaries.add('-'); 
			}
		}
		Expr expr2 = Term();
		expr = applyUnaries(new ArrayList<>(unaries.reversed()), expr2);  
		return expr;
	}

	Expr  Term() {
		Expr  expr;
		expr = null; 
		if (la.kind == 1) {
			Get();
			expr = new Var(t.val);  
		} else if (la.kind == 2) {
			Get();
			expr = new NumV(Integer.parseInt(t.val));  
		} else if (la.kind == 25) {
			Get();
			expr = new BoolV(true);  
		} else if (la.kind == 26) {
			Get();
			expr = new BoolV(false); 
		} else if (la.kind == 7) {
			Get();
			expr = Expr();
			Expect(8);
		} else SynErr(30);
		return expr;
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		Program();
		Expect(0);

		scanner.buffer.Close();
	}

	private static final boolean[][] set = {
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x},
		{_x,_T,_x,_x, _x,_T,_T,_x, _x,_x,_x,_x, _T,_x,_x,_T, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x}

	};
} // end Parser


class Errors {
	public int count = 0;                                    // number of errors detected
	public java.io.PrintStream errorStream = System.out;     // error messages go to this stream
	public String errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text
	
	protected void printMsg(int line, int column, String msg) {
		StringBuffer b = new StringBuffer(errMsgFormat);
		int pos = b.indexOf("{0}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, line); }
		pos = b.indexOf("{1}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, column); }
		pos = b.indexOf("{2}");
		if (pos >= 0) b.replace(pos, pos+3, msg);
		errorStream.println(b.toString());
	}
	
	public void SynErr (int line, int col, int n) {
		String s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "IDENT expected"; break;
			case 2: s = "NUM expected"; break;
			case 3: s = "\":=\" expected"; break;
			case 4: s = "\";\" expected"; break;
			case 5: s = "\"print\" expected"; break;
			case 6: s = "\"if\" expected"; break;
			case 7: s = "\"(\" expected"; break;
			case 8: s = "\")\" expected"; break;
			case 9: s = "\"then\" expected"; break;
			case 10: s = "\"else\" expected"; break;
			case 11: s = "\"endif\" expected"; break;
			case 12: s = "\"while\" expected"; break;
			case 13: s = "\"do\" expected"; break;
			case 14: s = "\"endwhile\" expected"; break;
			case 15: s = "\"int\" expected"; break;
			case 16: s = "\"bool\" expected"; break;
			case 17: s = "\"||\" expected"; break;
			case 18: s = "\"=\" expected"; break;
			case 19: s = "\"!=\" expected"; break;
			case 20: s = "\"<\" expected"; break;
			case 21: s = "\"+\" expected"; break;
			case 22: s = "\"-\" expected"; break;
			case 23: s = "\"*\" expected"; break;
			case 24: s = "\"!\" expected"; break;
			case 25: s = "\"true\" expected"; break;
			case 26: s = "\"false\" expected"; break;
			case 27: s = "??? expected"; break;
			case 28: s = "invalid Stmt"; break;
			case 29: s = "invalid Type"; break;
			case 30: s = "invalid Term"; break;
			default: s = "error " + n; break;
		}
		printMsg(line, col, s);
		count++;
	}

	public void SemErr (int line, int col, String s) {	
		printMsg(line, col, s);
		count++;
	}
	
	public void SemErr (String s) {
		errorStream.println(s);
		count++;
	}
	
	public void Warning (int line, int col, String s) {	
		printMsg(line, col, s);
	}
	
	public void Warning (String s) {
		errorStream.println(s);
	}
} // Errors


class FatalError extends RuntimeException {
	public static final long serialVersionUID = 1L;
	public FatalError(String s) { super(s); }
}
