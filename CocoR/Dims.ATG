/* This file contains the Token specification and Grammar which COCO/R uses to construct the scanner
and parser. COCO/R uses Extend Bacus-Naur form (EBNF) for the grammar, as well as its own series of commands
which will be explained when met first in context.  */

// The scanner/lexer and parser files are created by inserting generated code (based on this .ATG file)
// into the "Scanner.frame" and "Parser.frame" files located alongside the Dims.ATG file.

/* The EBNF uses the following extensions: */
/* [] Brackets mean that the string is written zero or one times.  */
/* {} Curly brackets mean that the string is repeated zero or more times  */
/* () is a grouping used alongside |. The parenthesis contains a series of strings separated by |. This means that exactly one of the strings is chosen. */

/* Imports here are inserted at the top of the generated lexer and parser. */
import org.sdfg610.dims.abstract_syntax.*;
import java.util.ArrayList;

/* The required start of a Coco/R grammar file. "Program" specifies the starting symbol of the grammar. */
COMPILER Program

/* Code here is injected at the start of the parser class. */
    public Stmt mainNode = null; // This contains the AST generated by calling parser.Parse().

    public boolean hasErrors() {
        return errors.count > 0;
    }

    private Stmt toComp(ArrayList<Stmt> stmtsReversed)
    {
        if (stmtsReversed.isEmpty())
            return null;

        Stmt result = stmtsReversed.getFirst();
        int index = 1;
        while (index < stmtsReversed.size()){
            Stmt current = stmtsReversed.get(index);
            if (current instanceof Comp comp)
                result = new Comp (comp.getStmt1(), new Comp(comp.getStmt2(), result));
            else
                result = new Comp(current, result);
            index += 1;
        }
        return result;
    }

    private Expr applyUnaries(ArrayList<Character> unariesReversed, Expr base)
    {
        Expr result = base;
        int index = 0;
        while (index < unariesReversed.size()){
            char ch = unariesReversed.get(index);
            result = switch (ch) {
                case '!' -> new UnaryOp(UnaryOperators.NOT, result);
                case '-' -> new UnaryOp(UnaryOperators.NEG, result);
                default -> throw new RuntimeException("Unknown unary operator: " + ch);
            };
            index += 1;
        }
        return result;
    }

    private Expr makeEqOp(String op, Expr left, Expr right)
    {
        return switch (op) {
            case "=" ->  new BinaryOp(BinaryOperators.EQ, left, right);
            case "!=" -> new UnaryOp(UnaryOperators.NOT, new BinaryOp(BinaryOperators.EQ, left, right));
            default -> throw new RuntimeException("Unknown equality operator: " + op);
        };
    }


/*------------------------------------------------------------------------*/
/* The following section contains the token specification of Dims.*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit = "0123456789" .
  lf  = '\n' .

TOKENS
  IDENT  = ('_' | letter) {letter | digit | '_'}.
  NUM = digit {digit}.

COMMENTS FROM "/*" TO "*/" NESTED  /* Nested means: "There can be comments inside comments" */
COMMENTS FROM "//" TO lf

IGNORE '\r' + '\n' + '\t' /* These characters are ignored by the lexer */


/*------------------------------------------------------------------------*/
/* The rest of the file contains the grammar for Dims.  */
PRODUCTIONS

Program = Stmts<out mainNode>.

/*------------------------------------------------------------------------*/
Stmts<out Stmt stmt> =     (. ArrayList<Stmt> list = new ArrayList(); .)
    { Stmt<out Stmt temp>  (. list.add(temp); .)
    }                      (. stmt = toComp(new ArrayList(list.reversed())); .)
.

Stmt<out Stmt stmt> =       (. stmt = Skip.INSTANCE; .)
    ( Declaration<out stmt>
    | Assignment<out stmt>
    | Print<out stmt>
    | If<out stmt>
    | While<out stmt> )
.

Declaration<out Stmt stmt> =
    Type<out Type type>
    IDENT                      (. String var = t.val; stmt = new Declaration(type, var); .)
    [ ":=" Expr<out Expr expr> (. stmt = new Comp(stmt, new Assign(var, expr));            .)
    ]
    ';'
.


Assignment<out Stmt stmt> =
    IDENT                 (. String var = t.val; .)
    ":="
    Expr<out Expr expr>  (. stmt = new Assign(var, expr); .)
    ';'                           
.

Print<out Stmt stmt> =
    "print"
    Expr<out Expr expr>  (. stmt = new Print(expr); .)
    ';'
.

If<out Stmt stmt> =                  (. Stmt stmtElse = Skip.INSTANCE; .)
    "if" '(' Expr<out Expr cond> ')'
    "then" Stmts<out Stmt stmtThen>
    [ "else" Stmts<out stmtElse> ]
    "endif"                          (. stmt = new If(cond, stmtThen, stmtElse); .)
.

While<out Stmt stmt> =
    "while" '(' Expr<out Expr cond> ')' "do" Stmts<out Stmt body>
    "endwhile"                           (. stmt = new While(cond, body); .)
.

/*------------------------------------------------------------------------*/
Type<out Type type>   (. type = null; .)
    = "int"           (. type = IntT.INSTANCE; .)
    | "bool"          (. type = BoolT.INSTANCE; .)
    .

/*------------------------------------------------------------------------*/
Expr<out Expr expr>
    = EqExpr<out expr>
    { "||" EqExpr<out Expr expr2> (. expr = new BinaryOp(BinaryOperators.OR, expr, expr2); .)
    }
.

EqExpr<out Expr expr>    (. String op = null; .)
    = RelExpr<out expr>
    { ( '='                     (. op = "="; .)
      | "!="                    (. op = "!="; .)
      ) RelExpr<out Expr expr2> (. expr = makeEqOp(op, expr, expr2); .)
    }
.

RelExpr<out Expr expr>
    = PlusExpr<out expr>
    { '<' PlusExpr<out Expr expr2> (. expr = new BinaryOp(BinaryOperators.LT, expr, expr2); .)
    }
.

PlusExpr<out Expr expr>          (. BinaryOperators op = BinaryOperators.ADD; .)
    = MultExpr<out expr>
    { ( '+'                      (. op = BinaryOperators.ADD; .)
      | '-'                      (. op = BinaryOperators.SUB; .)
      ) MultExpr<out Expr expr2> (. expr = new BinaryOp(op, expr, expr2); .)
    }
.

MultExpr<out Expr expr>
    = NotExpr<out expr>
    { '*' NotExpr<out Expr expr2> (. expr = new BinaryOp(BinaryOperators.MUL, expr, expr2); .)
    }
.

NotExpr<out Expr expr>        (. ArrayList<Character> unaries = new ArrayList(); .)
    = { '!'                   (. unaries.add('!'); .)
      | '-'                   (. unaries.add('-'); .)
      } Term<out Expr expr2>   (. expr = applyUnaries(new ArrayList<>(unaries.reversed()), expr2);  .)
.

Term<out Expr expr>           (. expr = null; .)
    = IDENT                   (. expr = new Ref(t.val);  .)
    | NUM                     (. expr = new NumV(Integer.parseInt(t.val));  .)
    | "true"                  (. expr = new BoolV(true);  .)
    | "false"                 (. expr = new BoolV(false); .)
    | '(' Expr<out expr> ')'
.

END Program. // Must refer to the same non-terminal as "COMPILER" at the top.